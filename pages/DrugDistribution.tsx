import Head from "next/head";
import React, { useEffect, useState } from "react";
import {
  Button,
  DatePicker,
  Form,
  Select,
  Space,
  Switch,
  Table,
  message,
  theme,
} from "antd";
import type { ColumnsType, TablePaginationConfig } from "antd/es/table";
import type {
  FilterValue,
  SorterResult,
  TableRowSelection,
} from "antd/es/table/interface";
import { useQuery, useQueryClient } from "react-query";
import axios from "axios";
import { drugType, mrType } from "./dataType";
import dayjs from "dayjs";

const columns: ColumnsType<mrType> = [
  {
    title: "姓名",
    dataIndex: "pname",
  },

  {
    title: "药品名称",
    dataIndex: "name",
  },
  {
    title: "用药剂量",
    dataIndex: "specification",
  },
  {
    title: "用药频率",
    dataIndex: "use_time",
  },
  {
    title: "数量",
    dataIndex: "use_count",
  },
  {
    title: "创建日期",
    dataIndex: "createDate",
  },
  {
    title: "状态",
    dataIndex: "readyAdmission",
    render: (text: any, row) => {
      return isNaN(text)
        ? "-"
        : text === 3 && !row?.money
        ? "待分配"
        : "已分配";
    },
  },
];

const dName = ["内科", "外科", "妇产科", "小儿科", "神经科", "消化内科", "All"];

export default function DrugDistribution() {
  const [form] = Form.useForm();
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [dataSource, setDataSource] = useState<mrType[]>();
  const [queryData, setQueryData] = useState({
    readyAdmission: 3,
    problem: { $exists: true },
    money: { $exists: false },
    department_id: undefined,
    createDate: undefined,
  });
  const queryClient = useQueryClient();
  const { token } = theme.useToken();

  const { data, isFetching, error } = useQuery({
    queryKey: ["getPatient", queryData],
    queryFn: () => axios.post(`/api/mr/find`, { queryData }),
    onSuccess(data) {
      let arr = data.data.result.map((obj: mrType) => {
        return {
          key: obj._id,
          pname: obj.name,
          createDate: obj.createDate,
          readyAdmission: obj.readyAdmission,
          money: obj.money,
          children: obj.Medication?.map((item: drugType) => ({
            ...item,
            _id: item.id,
            key: item.id,
          })),
        };
      });
      setDataSource(arr);
    },
  });

  const formStyle = {
    maxWidth: "none",
    borderRadius: token.borderRadiusLG,
    padding: 24,
  };
  const onSelectChange = (newSelectedRowKeys: React.Key[]) => {
    setSelectedRowKeys(newSelectedRowKeys);
  };

  const rowSelection: TableRowSelection<mrType> = {
    selectedRowKeys,
    onChange: onSelectChange,
    selections: [
      Table.SELECTION_ALL,
      Table.SELECTION_INVERT,
      Table.SELECTION_NONE,
    ],
    getCheckboxProps: (record: mrType) => {
      return !record.children ||
        record?.children.length === 0 ||
        record?.readyAdmission !== 3 ||
        record.money
        ? {
            disabled: true,
            name: record.name,
          }
        : { disabled: false, pname: record.pname };
    },
  };

  const handleUpdate = async () => {
    try {
      let arr = data?.data.result.filter((obj: any) =>
        selectedRowKeys.includes(obj._id)
      );
      const res = await axios.put(`/api/mr/handleMDistribution`, arr);
      setSelectedRowKeys([]);
      queryClient.invalidateQueries(["getPatient", queryData]);
      message.success("分配成功");
      return {
        data: res.data.result,
        success: true,
      };
    } catch (error) {
      return {
        data: [],
        success: false,
      };
    }
  };
  return (
    <>
      <Head>
        <title>药品分配</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Form
        form={form}
        name="advanced_search"
        style={formStyle}
        onFinish={(values: any) => {
          if (values?.department_id === 6) {
            values.department_id = undefined;
          }
          values.createDate = !values?.createDate
            ? undefined
            : dayjs(values.createDate).format("YYYY-MM-DD");

          if (values?.readyAdmission) {
            values.readyAdmission = 3;
            values.problem = { $exists: true };
            values.money = { $exists: false };
          } else {
            values.readyAdmission = undefined;
            values.problem = { $exists: true };
            values.money = undefined;
          }
          setSelectedRowKeys([]);
          setQueryData(values);
        }}
      >
        <Space size={[55, 55]} wrap>
          <Form.Item
            label="所属科室"
            name="department_id"
            style={{ width: 250 }}
            initialValue={6}
          >
            <Select>
              {dName.map((item, index) => (
                <Select.Option key={item} value={index}>
                  {item}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>
          <Form.Item name="createDate" label="创建日期">
            <DatePicker allowClear />
          </Form.Item>
          <Form.Item
            name={`readyAdmission`}
            label={`精简模式`}
            tooltip="去除已经分配药单的选项"
            initialValue={true}
          >
            <Switch defaultChecked />
          </Form.Item>
        </Space>
        <div style={{ textAlign: "right" }}>
          <Space size="small">
            <Button type="primary" htmlType="submit" loading={isFetching}>
              Search
            </Button>
            <Button
              onClick={() => {
                form.resetFields();
                setSelectedRowKeys([]);
              }}
            >
              Clear
            </Button>
          </Space>
        </div>
      </Form>
      <Table
        columns={columns}
        rowSelection={rowSelection}
        dataSource={dataSource}
        pagination={false}
        scroll={{ y: 450 }}
        loading={isFetching}
      />
      <div style={{ marginBottom: 16 }}>
        <Button
          type="primary"
          onClick={handleUpdate}
          disabled={!(selectedRowKeys.length > 0)}
        >
          Distribution
        </Button>
        <span style={{ marginLeft: 8 }}>
          {selectedRowKeys.length > 0
            ? `Selected ${selectedRowKeys.length} items`
            : ""}
        </span>
      </div>
    </>
  );
}
