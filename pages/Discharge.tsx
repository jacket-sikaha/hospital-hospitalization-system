import {
  AutoComplete,
  Avatar,
  Button,
  DatePicker,
  Form,
  Input,
  InputNumber,
  Modal,
  Select,
  Typography,
  message,
} from "antd";
import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";
import { SmileOutlined, UserOutlined } from "@ant-design/icons";
import type { FormInstance } from "antd/es/form";
import axios from "axios";
import { mrType } from "./dataType";
import dayjs from "dayjs";
import { useQuery, useQueryClient } from "react-query";
interface UserType {
  admission_date: string;
  dischargeDate: string;
  bed_name: string;
  name: string;
  age: string;
}

interface ModalFormProps {
  open: boolean;
  onCancel: () => void;
}

// reset form fields when modal is form, closed
const useResetFormOnCloseModal = ({
  form,
  open,
}: {
  form: FormInstance;
  open: boolean;
}) => {
  const prevOpenRef = useRef<boolean>();
  useEffect(() => {
    prevOpenRef.current = open;
  }, [open]);
  const prevOpen = prevOpenRef.current;

  useEffect(() => {
    if (!open && prevOpen) {
      form.resetFields();
    }
  }, [form, prevOpen, open]);
};

const ModalForm: React.FC<ModalFormProps> = ({ open, onCancel }) => {
  const [form] = Form.useForm();
  const [option, setOption] = useState<any[]>([]);
  useResetFormOnCloseModal({
    form,
    open,
  });

  const { data, isFetching, error } = useQuery({
    queryKey: ["getMR"],
    queryFn: () =>
      axios.post(`/api/mr/find`, {
        queryData: { readyAdmission: 3, bed_name: { $exists: true } },
      }),
    keepPreviousData: true,
    onSuccess(data) {
      setOption(data.data.result.filter((obj: mrType) => obj.bed_name !== ""));
    },
  });
  const onOk = () => form.submit();
  const onGenderChange = (value: string, opt: any) => {
    form.setFieldsValue({
      name: opt?.name,
      admission_date: dayjs(opt?.admission_date),
    });
  };
  return (
    <Modal title="添加出院人选" open={open} onOk={onOk} onCancel={onCancel}>
      <Form form={form} layout="vertical" name="userForm">
        <Form.Item name="name" label="姓名" rules={[{ required: true }]}>
          <Input />
        </Form.Item>
        <Form.Item name="bed_name" label="床位名" rules={[{ required: true }]}>
          <AutoComplete
            onSelect={onGenderChange}
            options={option.map(({ _id, bed_name, name, admission_date }) => {
              return {
                key: _id,
                value: bed_name,
                label: bed_name,
                _id,
                bed_name,
                name,
                admission_date,
              };
            })}
          />
        </Form.Item>
        <Form.Item
          name="admission_date"
          label="入院日期"
          tooltip="最近的入院日期"
          rules={[{ required: true, message: "入院日期不能为空" }]}
        >
          <DatePicker />
        </Form.Item>
      </Form>
    </Modal>
  );
};
export default function DischargePage() {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [formProvider] = Form.useForm();
  const showUserModal = () => setOpen(true);
  const hideUserModal = () => setOpen(false);

  const queryClient = useQueryClient();

  const onFinish = async (values: any) => {
    setLoading(true);
    let users = formProvider.getFieldValue("users");
    users = users?.map((obj: UserType) => {
      obj.dischargeDate = dayjs(values.dischargeDate).format("YYYY-MM-DD");
      obj.admission_date = dayjs(obj.admission_date).format("YYYY-MM-DD");
      return obj;
    });
    try {
      if (!users || users?.length === 0) {
        throw new Error("出院人选不能为空");
      }
      await axios.put(`/api/handleDischarge`, users);
      message.success("提交成功");
      queryClient.invalidateQueries(["getMR"]);
      setLoading(false);
      formProvider.resetFields();
    } catch (error: any) {
      setLoading(false);
      message.error(error.message);
    }
  };

  return (
    <>
      <Head>
        <title>出院手续管理</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h2>出院手续管理</h2>
      <Form.Provider
        onFormFinish={(name, { values, forms }) => {
          if (name === "userForm") {
            const { basicForm } = forms;
            const users = basicForm.getFieldValue("users") || [];
            basicForm.setFieldsValue({ users: [...users, values] });
            setOpen(false);
          }
        }}
      >
        <Form
          name="basicForm"
          onFinish={onFinish}
          style={{ maxWidth: 600, margin: "6rem" }}
          form={formProvider}
        >
          <Form.Item
            name="dischargeDate"
            label="出院日期"
            rules={[{ required: true }]}
          >
            <DatePicker allowClear />
          </Form.Item>
          <Form.Item
            label="User List"
            shouldUpdate={(prevValues, curValues) =>
              prevValues.users !== curValues.users
            }
          >
            {({ getFieldValue }) => {
              const users: UserType[] = getFieldValue("users") || [];
              return users.length ? (
                <div>
                  {users.map((user) => (
                    <div
                      key={user.name}
                      className="user"
                      style={{ margin: "1rem" }}
                    >
                      <Avatar
                        style={{
                          backgroundColor: "#87d068",
                          verticalAlign: "middle",
                          margin: "0 .5rem",
                        }}
                      >
                        {user.name[0]}
                      </Avatar>
                      {user.name} - {user.bed_name}
                    </div>
                  ))}
                </div>
              ) : (
                <Typography.Text className="ant-form-text" type="secondary">
                  ( <SmileOutlined /> No user yet. )
                </Typography.Text>
              );
            }}
          </Form.Item>
          <Form.Item>
            <Button htmlType="submit" type="primary" loading={loading}>
              Submit
            </Button>
            <Button
              htmlType="button"
              style={{ margin: "0 8px" }}
              onClick={showUserModal}
            >
              Add User
            </Button>
          </Form.Item>
        </Form>

        <ModalForm open={open} onCancel={hideUserModal} />
      </Form.Provider>
    </>
  );
}
